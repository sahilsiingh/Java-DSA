import java.util.*;

public class DFS {
    // Adjacency list for graph representation
    private Map<Integer, List<Integer>> graph;

    public DFS() {
        graph = new HashMap<>();
    }

    // Add an edge to the graph
    public void addEdge(int v, int w) {
        graph.computeIfAbsent(v, k -> new ArrayList<>()).add(w);
    }

    // DFS traversal starting from vertex v
    public void dfs(int v) {
        Set<Integer> visited = new HashSet<>();
        dfsHelper(v, visited);
    }

    private void dfsHelper(int v, Set<Integer> visited) {
        visited.add(v);
        System.out.print(v + " ");

        // Visit all the neighbors of v
        if (graph.containsKey(v)) {
            for (int neighbor : graph.get(v)) {
                if (!visited.contains(neighbor)) {
                    dfsHelper(neighbor, visited);
                }
            }
        }
    }

    public static void main(String[] args) {
        DFS dfs = new DFS();
        dfs.addEdge(1, 2);
        dfs.addEdge(1, 3);
        dfs.addEdge(2, 4);
        dfs.addEdge(3, 5);

        System.out.println("DFS traversal starting from vertex 1:");
        dfs.dfs(1);
    }
}
